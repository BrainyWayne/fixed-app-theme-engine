//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package com.afollestad.appthemeengine;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.ActivityManager.TaskDescription;
import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.os.Build.VERSION;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.TabLayout;
import android.support.v4.app.Fragment;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.view.menu.BaseMenuPresenter;
import android.support.v7.widget.ActionMenuView;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.ListView;
import com.afollestad.appthemeengine.customizers.ATEActivityThemeCustomizer;
import com.afollestad.appthemeengine.customizers.ATETaskDescriptionCustomizer;
import com.afollestad.appthemeengine.processors.Processor;
import com.afollestad.appthemeengine.util.Util;
import com.afollestad.appthemeengine.views.PreMadeView;
import com.afollestad.materialdialogs.internal.ThemeSingleton;
import java.lang.reflect.Field;

public final class ATE extends ATEBase {
    private static boolean isPreMadeView(@NonNull View view) {
        return view.getClass().getAnnotation(PreMadeView.class) != null;
    }

    private static boolean isChildrenBlacklistedViewGroup(@NonNull ViewGroup view) {
        return view instanceof ListView || view instanceof RecyclerView || view instanceof TabLayout;
    }

    private static void performDefaultProcessing(@NonNull Context context, @NonNull View current, @Nullable String key) {
        if(current.getTag() != null && current.getTag() instanceof String) {
            Processor processor = getProcessor((Class)null);
            if(processor != null) {
                processor.process(context, key, current, (Object)null);
            }
        }

    }

    private static void apply(@NonNull Context context, @NonNull ViewGroup view, @Nullable String key) {
        Processor processor = getProcessor(view.getClass());
        if(processor != null) {
            processor.process(context, key, view, (Object)null);
        }

        if(isChildrenBlacklistedViewGroup(view)) {
            performDefaultProcessing(context, view, key);
        } else {
            for(int i = 0; i < view.getChildCount(); ++i) {
                View current = view.getChildAt(i);
                if(current instanceof Toolbar && mToolbar == null) {
                    mToolbar = (Toolbar)current;
                }

                if(!isPreMadeView(current)) {
                    performDefaultProcessing(context, current, key);
                    if(current instanceof ViewGroup) {
                        apply(context, (ViewGroup)current, key);
                    } else {
                        processor = getProcessor(current.getClass());
                        if(processor != null) {
                            processor.process(context, key, current, (Object)null);
                        }
                    }

                    if(current instanceof CoordinatorLayout) {
                        ((CoordinatorLayout)current).setStatusBarBackgroundColor(Config.statusBarColor(context, key));
                    }
                }
            }

        }
    }

    public static Config config(@NonNull Context context, @Nullable String key) {
        return new Config(context, key);
    }

    @SuppressLint({"CommitPrefEdits"})
    public static boolean didValuesChange(@NonNull Context context, long updateTime, @Nullable String key) {
        return config(context, key).isConfigured() && Config.prefs(context, key).getLong("values_changed", -1L) > updateTime;
    }

    public static void preApply(@NonNull Activity activity, @Nullable String key) {
        didPreApply = activity.getClass();
        mToolbar = null;
        int activityTheme = activity instanceof ATEActivityThemeCustomizer?((ATEActivityThemeCustomizer)activity).getActivityTheme():Config.activityTheme(activity, key);
        if(activityTheme != 0) {
            activity.setTheme(activityTheme);
        }

        if(VERSION.SDK_INT >= 21) {
            Window window = activity.getWindow();
            if(Config.coloredStatusBar(activity, key)) {
                window.setStatusBarColor(Config.statusBarColor(activity, key));
            } else {
                window.setStatusBarColor(-16777216);
            }

            if(Config.coloredNavigationBar(activity, key)) {
                window.setNavigationBarColor(Config.navigationBarColor(activity, key));
            } else {
                window.setNavigationBarColor(-16777216);
            }

            applyTaskDescription(activity, key);
        }

        if(VERSION.SDK_INT >= 23) {
            View decorView = activity.getWindow().getDecorView();
            boolean lightStatusEnabled = false;
            int systemUiVisibility;
            if(Config.coloredStatusBar(activity, key)) {
                systemUiVisibility = Config.lightStatusBarMode(activity, key);
                switch(systemUiVisibility) {
                case 0:
                default:
                    break;
                case 1:
                    lightStatusEnabled = true;
                    break;
                case 2:
                    lightStatusEnabled = Util.isColorLight(Config.primaryColor(activity, key));
                }
            }

            systemUiVisibility = decorView.getSystemUiVisibility();
            if(lightStatusEnabled) {
                decorView.setSystemUiVisibility(systemUiVisibility | 8192);
            } else {
                decorView.setSystemUiVisibility(systemUiVisibility & -8193);
            }
        }

        if(Config.usingMaterialDialogs(activity, key)) {
            ThemeSingleton md = ThemeSingleton.get();
            md.titleColor = Config.textColorPrimary(activity, key);
            md.contentColor = Config.textColorSecondary(activity, key);
            md.itemColor = md.titleColor;
            md.widgetColor = Config.accentColor(activity, key);
            md.linkColor = ColorStateList.valueOf(md.widgetColor);
            md.positiveColor = ColorStateList.valueOf(md.widgetColor);
            md.neutralColor = ColorStateList.valueOf(md.widgetColor);
            md.negativeColor = ColorStateList.valueOf(md.widgetColor);
        }

    }

    public static void apply(@NonNull View view, @Nullable String key) {
        if(view.getContext() == null) {
            throw new IllegalStateException("View has no Context, use apply(Context, View, String) instead.");
        } else {
            apply(view.getContext(), view, key);
        }
    }

    public static void apply(@NonNull Context context, @NonNull View view, @Nullable String key) {
        performDefaultProcessing(context, view, key);
        if(view instanceof ViewGroup) {
            apply(context, (ViewGroup)view, key);
        }

    }

    public static void apply(@NonNull Activity activity, @Nullable String key) {
        if(didPreApply == null) {
            preApply(activity, key);
        }

        if(Config.coloredActionBar(activity, key)) {
            if(activity instanceof AppCompatActivity) {
                AppCompatActivity aca = (AppCompatActivity)activity;
                if(aca.getSupportActionBar() != null) {
                    Toolbar toolbar = Util.getSupportActionBarView(aca.getSupportActionBar());
                    if(toolbar == null) {
                        aca.getSupportActionBar().setBackgroundDrawable(new ColorDrawable(Config.toolbarColor(activity, key)));
                    }

                    Processor toolbarProcessor = getProcessor(Toolbar.class);
                    if(toolbarProcessor != null) {
                        toolbarProcessor.process(activity, key, (View)null, (Object)null);
                    }
                }
            } else if(activity.getActionBar() != null) {
                activity.getActionBar().setBackgroundDrawable(new ColorDrawable(Config.toolbarColor(activity, key)));
            }
        }

        ViewGroup rootView = (ViewGroup)((ViewGroup)activity.findViewById(16908290)).getChildAt(0);
        if(rootView instanceof DrawerLayout) {
            if(VERSION.SDK_INT >= 21) {
                int color = Config.coloredStatusBar(activity, key)?0:-16777216;
                activity.getWindow().setStatusBarColor(color);
            }

            if(Config.coloredStatusBar(activity, key)) {
                ((DrawerLayout)rootView).setStatusBarBackgroundColor(Config.statusBarColor(activity, key));
            }
        }

        apply(activity, (ViewGroup)rootView, key);
        didPreApply = null;
    }

    public static void apply(@NonNull Fragment fragment, @Nullable String key) {
        if(fragment.getActivity() == null) {
            throw new IllegalStateException("Fragment is not attached to an Activity yet.");
        } else {
            View fragmentView = fragment.getView();
            if(fragmentView == null) {
                throw new IllegalStateException("Fragment does not have a View yet.");
            } else {
                if(fragmentView instanceof ViewGroup) {
                    apply(fragment.getActivity(), (ViewGroup)((ViewGroup)fragmentView), key);
                } else {
                    apply(fragment.getActivity(), (View)fragmentView, key);
                }

                if(fragment.getActivity() instanceof AppCompatActivity) {
                    apply((Activity)fragment.getActivity(), key);
                }

            }
        }
    }

    public static void apply(@NonNull android.app.Fragment fragment, @Nullable String key) {
        if(fragment.getActivity() == null) {
            throw new IllegalStateException("Fragment is not attached to an Activity yet.");
        } else if(fragment.getView() == null) {
            throw new IllegalStateException("Fragment does not have a View yet.");
        } else {
            apply(fragment.getActivity(), (ViewGroup)((ViewGroup)fragment.getView()), key);
            if(fragment.getActivity() instanceof AppCompatActivity) {
                apply(fragment.getActivity(), key);
            }

        }
    }

    @TargetApi(21)
    private static void applyTaskDescription(@NonNull Activity activity, @Nullable String key) {
        Bitmap icon = null;
        int color;
        if(activity instanceof ATETaskDescriptionCustomizer) {
            ATETaskDescriptionCustomizer customizer = (ATETaskDescriptionCustomizer)activity;
            color = customizer.getTaskDescriptionColor();
            icon = customizer.getTaskDescriptionIcon();
        } else {
            color = Config.primaryColor(activity, key);
        }

        color = Util.stripAlpha(color);
        if(icon == null) {
            icon = ((BitmapDrawable)icon = getBitmapFromDrawable(activity.getApplicationInfo().loadIcon(activity.getPackageManager()));
        }

        TaskDescription td = new TaskDescription((String)activity.getTitle(), icon, color);
        activity.setTaskDescription(td);
    }

    public static void applyMenu(@NonNull Activity activity, @Nullable String key, @Nullable Menu menu) {
        Processor toolbarProcessor = getProcessor(Toolbar.class);
        if(toolbarProcessor != null) {
            toolbarProcessor.process(activity, key, mToolbar, menu);
        }

    }

    public static void applyOverflow(@NonNull AppCompatActivity activity, @Nullable String key) {
        Toolbar toolbar = mToolbar != null?mToolbar:Util.getSupportActionBarView(activity.getSupportActionBar());
        applyOverflow(activity, key, toolbar);
    }

    public static void applyOverflow(@NonNull Activity activity, @Nullable String key, @Nullable final Toolbar toolbar) {
        if(toolbar != null) {
            toolbar.post(new Runnable() {
                public void run() {
                    try {
                        Field f1 = Toolbar.class.getDeclaredField("mMenuView");
                        f1.setAccessible(true);
                        ActionMenuView actionMenuView = (ActionMenuView)f1.get(toolbar);
                        Field f2 = ActionMenuView.class.getDeclaredField("mPresenter");
                        f2.setAccessible(true);
                        BaseMenuPresenter presenter = (BaseMenuPresenter)f2.get(actionMenuView);
                        Field f3 = presenter.getClass().getDeclaredField("mOverflowPopup");
                        f3.setAccessible(true);
                        Field f4 = presenter.getClass().getDeclaredField("mActionButtonPopup");
                        f4.setAccessible(true);
                    } catch (Exception var7) {
                        var7.printStackTrace();
                    }

                }
            });
        }
    }

    private ATE() {
    }
}

